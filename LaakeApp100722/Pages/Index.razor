@*tämä on root page "/"*@
@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@*navigaatioon*@
@inject NavigationManager navManager
@*pystyy säilyttämään filtteröinti, jos käy jollain muulla sivulla ja tulee takaisin*@
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Training Suggestions</h1>
<div class="suggestion-container">
    <button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-light btn-lg text-uppercase">Suggest</button></div>

<div class="row">
    <div class="suggestions-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(()=>OrderByNew(true))">New</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(()=> OrderByNew(false))">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
      @*  joka kerta kun kirjoittaa niin se kutsuu onsearchinput metodia txt parametrina*@
        <input type="text" placeholder="Search"
            aria-label="Search box" class="form-control rounded-control"
            @oninput="((txt)=>OnSearchInput((string)txt.Value))"/>
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (suggestions is not null)
        { @*paging, infinateli scrollable list +10*@
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div class="suggestion-entry">
                    <div class="@GetvoteClass(s)" @onclick="(()=>VoteUp(s))">
                        <div class="text-uppercase">@GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top"></span>
                        <div class="text-uppercase">@GetUpvoteBottomText(s)</div>
                    </div>
                    <div class="suggestion-entry-text">
                        <div class="suggestion-entry-text-title" @onclick="(()=>OpenDetails(s))">
                            @s.Suggestion
                        </div>
                        <div>
                            <div class="suggestion-entry-text-category" @onclick="(()=> OpenDetails(s))">
                                @s.Category?.CategoryName
                            </div>
                        </div>
                    </div>
                    <div class="suggestion-entry-status @GetSuggestionStatusClass(s)">
                    <div class="suggestion-entry-status-text">
                        @s.SuggestionStatus?.StatusName
                    </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if(categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Category</span>
                <div class="@GetSelectedCategory()" @onclick="(()=>OnCategoryClick())">All</div>
                @foreach(var c in categories)
                {
                    <div class="@GetSelectedCategory(c.CategoryName)" @onclick="(()=>OnCategoryClick(c.CategoryName))">@c.CategoryName</div>                       
                }
            </div>
        }
        @if (statuses is not null)
        { <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div class="@GetSelectedStatus()" @onclick="(()=>OnStatusClick())">All</div>
                @foreach(var s in statuses)
                {
                    <div class="@GetSelectedStatus(s.StatusName)" @onclick="(()=>OnStatusClick(s.StatusName))">@s.StatusName</div>                       
                }
            </div>
            
        }
    </div>
</div>
@*Ensin koodi on tällä samalla sivulla testausvaiheessa, jälkikäteen siirretään se muualle. Ctrl . napauta hiirella code >extract code to code behind*@
@code{
    private UserModel loggedInUser;
    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
        await LoadAndVerifyUser();
    }

    private void LoadCreatePage()
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("/Create");

        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    //kirjautuneet käyttäjät täytyy vielä tallentaa mongodb tietokantaan
    private async Task LoadAndVerifyUser()
    {
        //actual user
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        //tarkistetaan onko kirjautunut, jos ei 
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            //joko meillä on kirjautuneen tiedot tai sitten se palauttaa new
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();
            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            //pitää olla equals koska muuten palauttaisi myös givenname ja surname, koska sis. name >firstordefault vuoksi kaatuisi
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;
            //have we changed object?
            bool isDirty = false;
            //jos tämä ei täsmää niin käyttäjä on uusi
            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if (isDirty)
            {
                //tämä tarkoittaa, että tietokannassa ei ole tätä käyttäjää eli Id ei löydy tietokannasta
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    //after page is rendered, redring 2 times
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //nämä on saatavilla vasta kun sivu on renderöity, siksi nämä ei voinut olla OnInitializedAsyncissa
            await LoadFilterState();
            await FilterSuggestions();
            //tämä update page because state has canged, koska on async
            StateHasChanged();
        }
    }
    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        //jos stringResult onnistui niin asettaa stringResults.Value, jos ei niin laittaa "All"
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }
    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestions();

        //jos ei ole all valittuna. ei ole ideaali, mutta tässäkin controled invorement 
        if (selectedCategory != "All")
        {
            //etsi categorian jos on kategorianimi joka vastaa valittua kategoriaa
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }
        if (selectedStatus!="All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }
        if (string.IsNullOrWhiteSpace(searchText)==false)
        {
            //onko suggestion tai description sisältää tämän tekstin eikä välitetä onko isot vai pienet kirjaimet
            output = output.Where(s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) || s.Description.Contains(searchText, StringComparison.CurrentCultureIgnoreCase)
            ).ToList();
        }
        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            //jos on suggestion jossa on yhtä paljon ääniä niin järjestetään ne lisäksi by datecreated
            output = output.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();

        }

        suggestions = output;

        await SaveFilterState();

    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if(loggedInUser is not null)
        {
            if (suggestion.Author.Id==loggedInUser.Id)
            {
                //Can't vote on your own suggestion
                return;
            }
            //pystyy toista kertaa klikkaamalla poistamaan oman äänensä. Nopeasti näyttää vielä tekemättä mitään tietokantaan.
            if (suggestion.UserVotes.Add(loggedInUser.Id)==false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            //päivitetään ääni tietokantaan
            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);

            //nopeutetaan,näytetään käyttäjälle uudet uservotes, odottamatta tietokanta päivitystä
            if(isSortedByNew == false)
            {
                suggestions = suggestions.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {//jos ei ole kirjautunut ja klikkaaa äänestä niin vie kirjautumissivulle. True koska on ulkopuolinen sivu
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            //jos kirjautunut käyttääjä on ehdotuksen esittäjän >hän näkee "Awaiting"
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }

    //onko monikko tai yksikkö
    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }
    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }

    //styling, palauttaa class css tiedon
    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "sort-selected";
        }
        else
        {
            return "";
        }
    }
    //käytetään tai ei riippuen siitä mikä on data tietokannasta
    private string GetvoteClass(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-entry-no-votes";
        }
        else if(suggestion.UserVotes.Contains(loggedInUser?.Id))
        {
            return "suggestion-entry-voted";
        }
        else
        {
            return "suggestion-entry-not-voted";
        }

    }
    //styling
    private string GetSuggestionStatusClass(SuggestionModel suggestion)
    {
        if(suggestion is null || suggestion.SuggestionStatus is null)
        {
            return "suggestion-entry-status-none";
        }

        string output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-entry-status-completed",
            "Watching" => "suggestion-entry-status-watching",
            "Upcoming" => "suggestion-entry-status-upcoming",
            "Dismissed" => "suggestion-entry-status-dismissed",
            _ => "suggestion-entry-status-none",
        };
        return output;
    }

    private string GetSelectedCategory(string category = "All")
    {
        if (category == selectedCategory)
        {
            return "selected-category";
        }
        else
        {
            return "";
        }
    }
     private string GetSelectedStatus(string status = "All")
    {
        if (status == selectedStatus)
        {
            return "selected-status";
        }
        else
        {
            return "";
        }
    }
}