@page "/Lisatiedot/{Id}"
@using LaakeApp100722.Models
@using LaakeApp100722.Components
@inject AuthenticationStateProvider authProvider
@inject ILaakeData laakeData
@inject IUserData userData
@inject ILaakeMuotoData laakemuotoData
@inject IYoMukaanData yomaarittelyData
@inject IAnnosteluValiData annosteluData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Lääkkeen lisätiedot</h1>

<div class="row justify-content-center detail-form">
      
    <div class="col-xl-8 col-lg-10 form-layout">
        <div class="closebutton">
                <button class="btn btn-close" @onclick="ClosePage"></button>
        </div>
    @* <div>
        <div>
            <button @onclick="this.OnClick">Laske seuraavat lääkkeenottoajat</button>
            @value1
        </div>
    </div>*@
   
    @if (laake is not null)
        { 
            <div class="row suggestion-detail-row">  
           
                <div class="col-12 laake-otsikko">
                  
                @if (currentEditingTitle == laake.Id)
                {
                    <EditForm Model="@editedTitle" OnSubmit="(()=>SaveName(laake))">
                        <InputText @bind-Value="editedTitle" />
                        <button type="submit">
                            <span class="oi oi-check"></span>
                        </button>
                            <button @onclick="(()=> currentEditingTitle=string.Empty)">
                            <span class="oi oi-x"></span>
                        </button>
                    </EditForm>
                }
                else
                {
                  <div class="laake-otsikko text-uppercase fw-bold">@laake.Nimi
                    <span class="oi oi-pencil" @onclick="(()=>EditName(laake))"></span></div>
                   
                } 
              </div>
              </div>
              <div class="row suggestion-detail-row">
            <div class="col-12 laake-detail"><div>Annostelumäärä:</div>
            <div>
            @if (currentEditingDescription == laake.Id)
                {
                    <EditForm Model="@editedmaara" OnSubmit="(()=>SaveAnnosmaara(laake))">
                        <InputNumber @bind-Value="editedmaara"/>
                            <button type="submit">
                            <span class="oi oi-check"></span>
                        </button>
                            <button @onclick="(()=> currentEditingDescription=string.Empty)">
                            <span class="oi oi-x"></span>
                        </button>
                    </EditForm>
                }
                else
                {
                    @laake.AnnosteluMaara 
                    <span class="oi oi-pencil edit-merkki" @onclick="(()=>EditAnnosmaara(laake))"></span>
                }
                </div>
        </div>
        <div class="row suggestion-detail-row">
            <div class="col-12 laake-detail">
            @if (laake.LaakeMuoto is not null){
            <div>
                @laake.LaakeMuoto.LaakeMuotoNimi
                </div>
                <div>@laake.LaakeMuoto.LaakeMuotoKuvaus</div>}
            </div>
            </div>
                <div class="col-12 laake-detail" >
                    <div>@Yomukaan(laake.YoMukaan)</div>
                <div>Lääke lisätty: @laake.Lisatty.ToString("dd.MM.yyyy")</div>
            </div>
            
         </div>
  
    
    }
    </div>
</div>
        @if(ottopvmlista is not null){
            <div class="row justify-content-center detail-form ottoaika-div">
        <div class="col-xl-8 col-lg-10 form-layout"> <div class="fw-bold text-uppercase">Ottoajat</div>
        <div >
            @foreach (var o in ottopvmlista)
            {
                //aina sama pvm
                @if (pvm!=Aika(o))
                {
                    
                
                <div class="fw-bold">@o.Otettu.ToString("dd.MM.yyyy") klo </div>

                @foreach (var item in ottopvmlista)
                {   
                    @if(PVM(item)==aika)
                    {
                    <div class="ottoajat-list ottoajat" >@item.Otettu.ToString("HH:mm")</div>
                    
                    }
                }
                }
            }
            </div>
        </div>
        </div>
        }
    
   









@code {
    //parametri public koska kaikki muut sivutkin käyttävät tätä
    [Parameter]
    public string Id { get; set; }

    private LaakeModel laake;
    private UserModel loggedInUser;
    private AnnosteluValiModel annosteluVali;
    private List<AnnosteluValiModel> ottopvmlista;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private int editedmaara;
    private YoMaarittelyModel yo;
    private double paiva;
    private TimeSpan result;
    private double jaettuna;
    private DateTime seuraavaAika;
    private string seuraavaaika;
    private string value1 = "";
    private string aika = "";
    private string pvm = "";


    protected async override Task OnInitializedAsync()
    {
        laake = await laakeData.GetLaake(Id);
        yo = await yomaarittelyData.GetYoMukaanYksi(laake.Author.Id);
        //annosteluVali = await annosteluData.GetAnnosteluvali(laake.Id);

        //uses userdata and populates it
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        ottopvmlista = await annosteluData.GetLaakkeenOttopvm(loggedInUser.Id, laake.Id);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void EditName(LaakeModel model)
    {
        laake = model;
        editedTitle = model.Nimi;
        currentEditingTitle = model.Id;
        currentEditingDescription = "";
    }
    private async Task SaveName(LaakeModel model)
    {
        currentEditingTitle = string.Empty;
        model.Nimi = editedTitle;
        await laakeData.UpdateLaake(model);
    }

    private void EditAnnosmaara(LaakeModel model)
    {
        laake = model;
        editedmaara = model.AnnosteluMaara;
        currentEditingTitle = "";
        currentEditingDescription = model.Id;
    }

    private async Task SaveAnnosmaara(LaakeModel model)
    {
        currentEditingDescription = string.Empty;
        model.AnnosteluMaara = editedmaara;
        await laakeData.UpdateLaake(model);
    }

    private async Task LaskeMaarat(LaakeModel model)
    {
        laake = await laakeData.GetLaake(Id);
        yo = await yomaarittelyData.GetYoMukaanYksi(laake.Author.Id);
        laake = model;


    }
    private void OnClick(MouseEventArgs e)
    {
        if(yo is not null){
            TimeSpan result = yo.YoLoppu.Subtract(yo.YoAlku);
            double paiva = 24 - (double)result.Hours;
            //double paiva = 24;
            //int paiva = 24-4;
            int annosteluvaliint = laake.AnnosteluVali1;
            if (annosteluvaliint > 2){
                annosteluvaliint =annosteluvaliint- 1;
            }

            double jaettuna = paiva/ (annosteluvaliint);
            //double jaettuna = paiva/ (laake.AnnosteluVali1-1);
            //seuraavaAika = yo.YoLoppu.AddHours(jaettuna);
            DateTime seuraavaAika = yo.YoLoppu;

            for (var i = 0; i < laake.AnnosteluVali1; i++)
            {
                if (yo.YoLoppu.TimeOfDay <=seuraavaAika.TimeOfDay && yo.YoAlku.TimeOfDay >= seuraavaAika.TimeOfDay)
                {
                    value1= value1+ " "+ seuraavaAika.ToString("HH:mm");
                    seuraavaAika = seuraavaAika.AddHours(jaettuna);
                }

            }
        }
        else
        {
            paiva = 24;
            double jaettuna = paiva / laake.AnnosteluVali1;
            DateTime seuraavaAika = DateTime.Now;
            for (var i = 0; i < laake.AnnosteluVali1; i++)
            {
                value1= value1+ " "+ seuraavaAika.ToString("HH:mm");
                seuraavaAika = seuraavaAika.AddHours(jaettuna);
            }
        }

    }
    private string Yomukaan(bool yomukaan)
    {
        if (yomukaan)
        {
            return "Yö lasketaan";
        }
        else
        {
            return "Yötä ei lasketa";
        }
    }

    private string Aika(AnnosteluValiModel model)
    {
        aika = "";
        aika=model.Otettu.ToString("dd.MM.yyyy");
        return aika;
    }

    private string PVM(AnnosteluValiModel model)
    {
        pvm = "";
        pvm=model.Otettu.ToString("dd.MM.yyyy");
        return pvm;
    }
}
