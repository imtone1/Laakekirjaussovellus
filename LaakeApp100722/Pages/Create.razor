@page "/Create"
@attribute [Authorize]
@using LaakeApp100722.Models
@using LaakeApp100722.Components
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
<h1>Make A Suggestion</h1>

<div>
    <div>
        <div><button @onclick="ClosePage"></button></div>
        @if(categories is not null)
        {
            
        }
        <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div>
                <label for="suggestion-text">Suggestion</label>
                <div>Focus on the topir of technology you want to learn about.</div>
               @* input object type text*@
                <InputText id="suggestion-text" @bind-Value="suggestion.Suggestion"/>
            </div>
            <div>
                <label for="category">Category</label>
                <div>Choose one category.</div>
                <div>
                    <MyInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                        @foreach(var c in categories)
                        {
                            <div>
                                <InputRadio Value ="@c.Id" id="@c.Id"/>
                                <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                            </div>
                        }
                    </MyInputRadioGroup>
                    
                </div>
            </div>
             <div>
                <label for="description-text">Description</label>
                <div>Briefly describe your suggestion.</div>
               @* input object type text*@
                <InputTextArea id="desctiption-text" @bind-Value="suggestion.Description"/>
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateSuggestionModel suggestion = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        categories= await categoryData.GetAllCategories();

        //actial user
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId=authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        loggedInUser = await userData.GetUserFromAuthentication(objectId);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
    private async Task CreateSuggestion()
    {
        //koska käytetään Modaalin jossa on ui specific modifiers, täytyy mapata
        SuggestionModel s = new();
        s.Suggestion = suggestion.Suggestion;
        s.Description = suggestion.Description;
        s.Author = new BasicUserModel(loggedInUser);
        s.Category = categories.Where(c => c.Id == suggestion.CategoryId).FirstOrDefault();

        if(s.Category is null)
        {
            suggestion.CategoryId = "";
            return;
        }

        await suggestionData.CreateSuggestion(s);
        //puhdistetaan suggestionin, jottei luoda toista samanlaista
        suggestion = new();
        ClosePage();
    }
}
