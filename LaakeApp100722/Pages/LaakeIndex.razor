@page "/Laakkeet"
@using LaakeApp100722.Models
@using LaakeApp100722.Components
@inject AuthenticationStateProvider authProvider
@inject ILaakeData laakeData
@inject IUserData userData
@inject ILaakeMuotoData laakemuotoData
@inject IYoMukaanData yomaarittelyData
@inject IAnnosteluValiData annosteluData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Lääkkeesi</h1>
<div class="suggestion-container">
    <button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-light btn-lg text-uppercase">Lisää lääke</button></div>

<div class="row">
    <div class="suggestions-count col-md-4 text-light mt-2">@laake?.Count lääkettä</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(()=>OrderByNew(true))">New</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(()=> OrderByNew(false))">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
      @*  joka kerta kun kirjoittaa niin se kutsuu onsearchinput metodia txt parametrina*@
        <input type="text" placeholder="Search"
            aria-label="Search box" class="form-control rounded-control"
            @oninput="((txt)=>OnSearchInput((string)txt.Value))"/>
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (laake is not null)
        { @*paging, infinateli scrollable list +10*@
            <Virtualize Items="@laake" Context="s" OverscanCount="10">
                <div class="suggestion-entry">
                    <div class="suggestion-entry-text">
                        <div class="suggestion-entry-text-title" @onclick="(()=>OpenDetails(s))">
                            @s.Nimi
                        </div>
                        <div> @s.AnnosteluMaara</div>
                        <div>
                            <div class="suggestion-entry-text-category" @onclick="(()=> OpenDetails(s))">
                                @s.LaakeMuoto?.LaakeMuotoNimi
                            </div>
                        </div>
                    </div>
                    <div class="suggestion-entry-status">
                    <div class="suggestion-entry-status-text">
                        @s.YoMukaan
                    </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if(laakemuodot is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Lääkemuodot</span>
                <div class="@GetSelectedCategory()" @onclick="(()=>OnCategoryClick())">All</div>
                @foreach(var c in laakemuodot)
                {
                    <div class="@GetSelectedCategory(c.LaakeMuotoNimi)" @onclick="(()=>OnCategoryClick(c.LaakeMuotoNimi))">@c.LaakeMuotoNimi</div>                       
                }
            </div>
        }
        
    </div>
</div>



@code {
    private UserModel loggedInUser;
    private List<LaakeMuotoModel> laakemuodot;
    private List<LaakeModel> laake;

    bool isSortedByNew = true;
    private string searchText = "";
    private string selectedLaakemuoto = "All";

    protected async override Task OnInitializedAsync()
    {
        laakemuodot = await laakemuotoData.GetAllLaakemuodot();
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private void LoadCreatePage()
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("/LisaaLaake");

        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private async Task FilterSuggestions()
    {
          var output = await laakeData.GetUsersLaakkeet(loggedInUser.Id);

        //jos ei ole all valittuna. ei ole ideaali, mutta tässäkin controled invorement 
        if (selectedLaakemuoto != "All")
        {
            //etsi categorian jos on kategorianimi joka vastaa valittua kategoriaa
            output = output.Where(s => s.LaakeMuoto?.LaakeMuotoNimi == selectedLaakemuoto).ToList();
        }
       
        if (string.IsNullOrWhiteSpace(searchText)==false)
        {
            //onko suggestion tai description sisältää tämän tekstin eikä välitetä onko isot vai pienet kirjaimet
            output = output.Where(s => s.Nimi.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.Lisatty).ToList();
        }
        else
        {
            //jos on suggestion jossa on yhtä paljon ääniä niin järjestetään ne lisäksi by datecreated
            output = output.OrderByDescending(s => s.AnnosteluMaara).ThenByDescending(s => s.Lisatty).ToList();

        }

        laake = output;

      

    }
      private void OpenDetails(LaakeModel laake)
    {
        navManager.NavigateTo($"/Lisatiedot/{laake.Id}");
    }

     private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

        private async Task OnCategoryClick(string category = "All")
    {
        selectedLaakemuoto = category;
        await FilterSuggestions();
    }

        private string GetSelectedCategory(string category = "All")
    {
        if (category == selectedLaakemuoto)
        {
            return "selected-category";
        }
        else
        {
            return "";
        }
    }
        //styling, palauttaa class css tiedon
    private string SortedByNewClass(bool isNew)
    {
        if (isNew == isSortedByNew)
        {
            return "sort-selected";
        }
        else
        {
            return "";
        }
    }

}
